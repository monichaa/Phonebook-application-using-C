
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * File:   main.c
 * Author: Satish
 *
 * Created on November 7, 2019, 2:51 PM
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#define FLUSH fflush(stdin); // fpurge(stdin) for linux

typedef struct entry {
    char fname[20];
    char lname[20];
    char pnumber[20];
} entry;
void addentry(int, entry**, char addfname[20], char addlname[20], char addpnumber[20]);

int main(void) {
    int selection = 0;
    int inputtest = 1;
    int pnum = 0; // keeps track of number of contacts

    char addfname[20];
    char addlname[20];
    char addpnumber[20];

    entry *pcontacts = NULL;

    for (;;) {
        do {
            printf("\nPhonebook Menu\n\n");
            printf("1:\tAdd contact\n");
            printf("2:\tDelete contact\n");
            printf("3:\tDisplay contacts\n");
            printf("4:\tSearch contacts\n");
            printf("5:\tExit\n");
            printf("\nChoose an action (1-5): ");
            scanf("%d", &selection);

            if (selection < 1 || selection > 5) {
                printf("Invalid input. Please enter an integer between 1 and 4.\n");
                inputtest = 0;
            }
            if (selection == 5) {
                free(pcontacts); /* OK for NULL */
                printf("\nThank you for using this phonebook.");
                return 0;
            }
            switch (selection) {
                case 1:
                    printf("\nEnter first name: ");
                    scanf("%19s", addfname);
                    printf("Enter last name: ");
                    scanf("%19s", addlname);
                    printf("Enter phone number (no spaces): ");
                    scanf("%19s", addpnumber);
                    addentry(pnum, &pcontacts, addfname, addlname, addpnumber);
                    pnum++;
                    break;
                case 2:
                    RemoveContact(&pcontacts, pnum);
                    break;
                case 3:
                    DisplayContact(&pcontacts, pnum);
                    break;
                case 4:
                    SearchContact(&pcontacts, pnum);
                    break;
            }
        } while (inputtest == 1);
    }
}

/* add an entry at position pnum */
void addentry(int pnum, entry **pp, char addfname[20], char addlname[20], char pnumber[20]) {

    entry *pcontact = *pp;
    pcontact = realloc(pcontact, (pnum + 1) * sizeof (entry));

    if (pcontact != NULL) {
        *pp = pcontact; /* update pointer in main */
        strcpy(pcontact[pnum].fname, addfname);
        strcpy(pcontact[pnum].lname, addlname);
        strcpy(pcontact[pnum].pnumber, pnumber);
        printf("\nContact has been added.");
    } else {
        printf("No memory is available.\n");
    }
}

void DisplayContact(entry **pp, int pnum) {

    entry *pcontact = *pp;
    for (int i = 0; i < pnum; i++) {
        printf("ID    : %d\n", i + 1);
        printf("First Name  : %s\n", pcontact[i].fname);
        printf("Last Name: %s\n", pcontact[i].lname);
        printf("Mobile: %s\n", pcontact[i].pnumber);
        printf("\n");
    }
}

void SearchContact(entry **pp, int pnum) {
    char name[20];
    int i;
    entry *pcontact = *pp;

    for (i = 0; i < pnum; i++) {
        printf("Enter (Search Name): ");
        scanf("%19s", name);
        for (i = 0; i < pnum; i++) {
            if (strcmp(pcontact[i].fname, name) == 0) {
                printf("ID    : %d\n", i + 1);
                printf("First Name  : %s\n", pcontact[i].fname);
                printf("Last Name: %s\n", pcontact[i].lname);
                printf("Mobile: %s\n", pcontact[i].pnumber);
                printf("\n");
            }
        }

        printf("\n");
    }
}

void RemoveContact(entry **pp, int pnum) {
    char name[20];
    int i, j;
    entry *pcontact = *pp;

    printf("\nEnter name (BK - back): ");
    scanf("%19s", name);

    if ((name[0] == 'b' || name[0] == 'B') && (name[1] == 'k' || name[1] == 'K') && name[2] == '\0')
        return;

    for (i = 0; i < pnum; i++) {
        if (strcmp(pcontact[i].fname, name) == 0) {
            printf("ID    : %d\n", i + 1);
            printf("First Name  : %s\n", pcontact[i].fname);
            printf("Last Name: %s\n", pcontact[i].lname);
            printf("Mobile: %s\n", pcontact[i].pnumber);
            printf("Remove contact (Y - yes | N - no | B - back):\n");
            char yesOrNo;
            scanf(" %c", &yesOrNo);

            switch (yesOrNo) {
                case 'y':
                case 'Y':
                    printf("Removing contact: %s\n", pcontact[i].fname);
                    for (j = i; j < pnum; j++) {
                        strcpy(pcontact[j].fname, pcontact[j + 1].fname);
                        strcpy(pcontact[j].lname, pcontact[j + 1].lname);
                        strcpy(pcontact[j].pnumber, pcontact[j + 1].pnumber);
                    }
                    memset(pcontact[pnum].fname, 0, 20);
                    memset(pcontact[pnum].lname, 0, 20);
                    memset(pcontact[pnum].pnumber, 0, 20);
                    pnum--;
                    i--;
                    printf("Contact removed...\n");
                    break;
                case 'n':
                case 'N':
                    break;
                case 'b':
                case 'B':
                    return;
                default:
                    printf("Invalid option selected... default to N\n");
                    break;
            }
        }

        printf("\n");
    }
    printf("\n");
}